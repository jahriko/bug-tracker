datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Status {
  BACKLOG
  IN_PROGRESS
  DONE
  CANCELLED

  
}

enum Priority {
  NO_PRIORITY
  HIGH
  MEDIUM
  LOW

  
}

model User {
  id                  String            @id() @default(cuid())
  name                String
  email               String            @unique()
  emailVerified       DateTime?
  image               String?
  hashedPassword      String
  lastWorkspaceUrl    String?
  ownedWorkspaces     Workspace[]       @relation("WorkspaceOwner")
  workspaceMembers    WorkspaceMember[]
  projectMembers      ProjectMember[]
  assignedIssues      Issue[]           @relation("AssignedUser")
  issues              Issue[]
  logs                IssueActivity[]
  comments            Comment[]
  authoredDiscussions Discussion[]      @relation("DiscussionAuthor")
  discussionPosts     DiscussionPost[]  @relation("DiscussionPostAuthor")
  discussionLikes     DiscussionLike[]

  // can be created by anyone, even not logged in
  @@allow('create', true)

  // can be read by users sharing a workspace
  @@allow('read', workspaceMembers?[workspace.members?[user == auth()]])

  // full access by oneself
  @@allow('all', auth() == this)

  
}

model Workspace {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  private     Boolean           @default(true)
  url         String            @unique
  members     WorkspaceMember[]
  projects    Project[]
  discussions Discussion[]
  owner       User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String            @default(auth().id)

  //everyone can read the workspace if it's not private or they're a member of the workspace
  @@allow('read', !private || members?[user == auth()])

  // workspace admin can create, and update
  @@allow('create,update',  members?[user == auth() && role == 'ADMIN'])

  // Owner can do all operations
  @@allow('all', owner == auth())


  @@index([ownerId])

  
}

model WorkspaceMember {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  role        Role      @default(MEMBER)

  // everyone can read the workspace if it's not private or they're a member of the workspace
  @@allow('read', !workspace.private || workspace.members?[user == auth()])

  // owner/admin can do all operations
  @@allow('all', workspace.owner == auth() || workspace.members?[user == auth() && role == 'ADMIN'])


  @@id([workspaceId, userId])

  
}

enum Role {
  ADMIN
  MEMBER

  
}

model Project {
  id                   Int                  @id() @default(autoincrement())
  identifier           String               @unique
  title                String
  description          String?
  updatedAt            DateTime             @updatedAt()
  createdAt            DateTime             @default(now())
  archivedAt           DateTime?
  members              ProjectMember[]
  issues               Issue[]
  discussions          Discussion[]
  discussionCategories DiscussionCategory[]
  workspace            Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId          Int

  // Owner/Admin can do all operations
  @@allow('all', check(workspace) || (workspace.members?[user == auth() && (role == 'ADMIN')]))

  // can be read by everyone if it's not private or they're a member of the project
  @@allow('read', check(workspace) || members?[user == auth()])


  @@index([archivedAt, workspaceId])

  
}

model ProjectMember {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  // require login
  @@deny('all', auth() == null)

  // can be read by members within the project or everyone if it's not private
  @@allow('read', true)

  // members can be modified by the manager, owner, or admin
  @@allow('all', project.workspace.owner == auth() || project.workspace.members?[user == auth() && (role == 'ADMIN')])


  @@id([projectId, userId])

  
}

model Label {
  id     Int          @id() @default(autoincrement())
  name   String
  color  String

  issues IssueLabel[]

  // can be read by everyone
  @@allow('read', true)

  // require login
  @@deny('all', auth() == null)

  
}

model IssueLabel {
  issueId Int
  labelId Int
  issue   Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  label   Label @relation(fields: [labelId], references: [id])

  @@id([issueId, labelId])

  @@allow('read', check(issue))
  @@allow('create,update', check(issue))

  // Temporary
  @@allow('delete', true)

  
}

model Issue {
  id             Int             @id() @default(autoincrement())
  title          String
  status         Status          @default(BACKLOG)
  priority       Priority        @default(NO_PRIORITY)
  description    String
  assignedUser   User?           @relation(fields: [assignedUserId], references: [id], name: "AssignedUser")
  assignedUserId String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
  deletedAt      DateTime?       // Soft delete field
  archivedAt     DateTime?
  owner          User?           @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  ownerId        String?         @default(auth().id)
  project        Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      Int
  labels         IssueLabel[]
  activityLogs   IssueActivity[]
  comments       Comment[]


  // can be read by members of the project or if it's not private 
  @@allow('read', check(project))

  // can be created by everyone within the project
  @@allow('create', check(project))

  // can be updated/deleted by the member who created the issue, admin
  @@allow('update,delete', check(project) || auth() == owner )

  // update cannot change owner
  @@deny('update', future().owner != owner)

  @@index([status])
  @@index([priority])
  @@index([createdAt])

  
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete field
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  issue     Issue     @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId   Int
  parent    Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  parentId  Int?
  children  Comment[] @relation("ChildComments")
  
  // can be read/created by everyone within the project
  @@allow('read,create', check(issue))

  // can be deleted by the user who created the comment or admin
  @@allow('delete', auth() == author || issue.project.workspace.members?[user == auth() && (role == 'ADMIN')])


  @@index([authorId])
  @@index([createdAt])

  
}

model IssueActivity {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  issue         Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId       Int

  user          User     @relation(fields: [userId], references: [id])
  userId        String   @default(auth().id)

  issueActivity String

  @@delegate(issueActivity)

  //temporary
  // @@allow('all', true)


  // can be read/created by everyone if the project is not private
  @@allow('all', check(issue))


  @@index([issueId, createdAt])

  
}

model StatusActivity extends IssueActivity {
  statusName String
}

model PriorityActivity extends IssueActivity {
  priorityName String
}

model TitleActivity extends IssueActivity {
  title String
}

model DescriptionActivity extends IssueActivity {
  body String
}

model AssignedActivity extends IssueActivity {
  assignedUsername  String
  assignedUserImage String
}

model LabelActivity extends IssueActivity {
  labelName  String
  labelColor String
  action     String
}

model CommentActivity extends IssueActivity {
  commentId Int
  // require login
  @@deny('all', auth() == null)

  // can be read by everyone if the project is not private
  @@allow('read', true && !issue.project.workspace.private)

  // can be created by the user within the workspace
  @@allow('create', issue.project.workspace.members?[user == auth()])

  // can be updated by the user who created the comment or admin
  @@allow('update', auth() == user || issue.project.workspace.members?[user == auth() && role == 'ADMIN'])
}

model ProjectActivity extends IssueActivity {
  projectName String
}

model DiscussionCategory {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  emoji       String?
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  discussions Discussion[]

  @@unique([projectId, name])
  @@index([projectId])

  // Permissions
  @@allow('read', check(project))
  @@allow('create,update,delete', project.workspace.members?[user == auth() && (role == 'ADMIN')])

  
}

model Discussion {
  id          Int                @id @default(autoincrement())
  title       String
  content     String             @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  project     Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  author      User               @relation("DiscussionAuthor", fields: [authorId], references: [id])
  authorId    String
  category    DiscussionCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  posts       DiscussionPost[]
  isResolved  Boolean            @default(false)
  viewCount   Int                @default(0)
  likeCount   Int                @default(0)
  workspace   Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int
  likes       DiscussionLike[]
  pinnedAt    DateTime?

  @@index([projectId])
  @@index([createdAt])
  @@index([categoryId])

  // Permissions
  @@allow('read', check(project))
  @@allow('create', auth() != null && project.members?[user == auth()])
  @@allow('update', auth() == author || project.workspace.members?[user == auth() && (role == 'ADMIN')])
  @@allow('delete', project.workspace.members?[user == auth() && (role == 'ADMIN')])

  
}

model DiscussionLike {
  id           Int        @id @default(autoincrement())
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@unique([discussionId, userId])
  @@index([discussionId])
  @@index([userId])

  // Permissions
  @@allow('read', check(discussion))

  // can be created/deleted by anyone within the workspace
  @@allow('create,delete', discussion.workspace.members?[user == auth()])

  
}

model DiscussionPost {
  id           Int              @id @default(autoincrement())
  content      String           @db.Text
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  discussion   Discussion       @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId Int
  author       User             @relation("DiscussionPostAuthor", fields: [authorId], references: [id])
  authorId     String
  parent       DiscussionPost?  @relation("Replies", fields: [parentId], references: [id])
  parentId     Int?
  replies      DiscussionPost[] @relation("Replies")
  isAccepted   Boolean          @default(false)

  @@index([discussionId])

  // Permissions
  @@allow('read', check(discussion))
  @@allow('create', auth() != null && discussion.project.members?[user == auth()])
  @@allow('update', auth() == author)
  @@allow('delete', auth() == author || discussion.project.workspace.members?[user == auth() && (role == 'ADMIN')])

  
}