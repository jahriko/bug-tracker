//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
    id String @id() @default(cuid())
    name String
    email String @unique()
    emailVerified DateTime?
    image String?
    hashedPassword String
    lastWorkspace String?
    accounts Account[]
    sessions Session[]
    ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
    workspaces UserWorkspace[]
    UserTeam UserTeam[]
    teams Team[] @relation("TeamLead")
    assignedIssues Issue[] @relation("Assignee")
    issues Issue[]
    logs IssueLog[]
    comments Comment[]
    commentLogs CommentLog[]
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
}

model Workspace {
    id Int @id() @default(autoincrement())
    name String @unique()
    description String?
    createdAt DateTime @default(now())
    members UserWorkspace[]
    projects Project[]
    owner User? @relation("WorkspaceOwner", fields: [ownerId], references: [id])
    ownerId String?
}

model UserWorkspace {
    workspace Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId Int
    user User @relation(fields: [userId], references: [id])
    userId String
    role String @default("member")

    @@id([workspaceId, userId])
}

model Project {
    id String @id() @default(cuid())
    title String
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())
    deletedAt DateTime? @default(now())
    issues Issue[]
    Workspace Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId Int?
    team Team? @relation(fields: [teamId], references: [id])
    teamId Int?

    @@index([deletedAt])
}

model Team {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    members UserTeam[]
    projects Project[]
    projectId String?
    lead User? @relation("TeamLead", fields: [leadId], references: [id])
    leadId String?
}

model UserTeam {
    team Team @relation(fields: [teamId], references: [id])
    teamId Int
    user User @relation(fields: [userId], references: [id])
    userId String

    @@id([teamId, userId])
}

model Issue {
    id Int @id() @default(autoincrement())
    title String
    status String
    priority String
    description String
    isHidden Boolean @default(false)
    label String[]
    labels Label[]
    assignee User? @relation(fields: [assigneeId], references: [id], name: "Assignee")
    assigneeId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime? @default(now())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    comments Comment[]
    issueLabels IssueLabel[]
    logs IssueLog[]

    @@index([deletedAt, userId])
}

model Label {
    id Int @id() @default(autoincrement())
    name String
    color String
    issueLabels IssueLabel[]
    Issue Issue? @relation(fields: [issueId], references: [id])
    issueId Int?
}

model IssueLabel {
    issueId Int
    labelId Int
    issue Issue @relation(fields: [issueId], references: [id])
    label Label @relation(fields: [labelId], references: [id])

    @@id([issueId, labelId])
}

model IssueLog {
    id Int @id() @default(autoincrement())
    action String
    value String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    comments CommentLog[]
    issue Issue @relation(fields: [issueId], references: [id])
    issueId Int
    user User @relation(fields: [userId], references: [id])
    userId String
}

model Comment {
    id Int @id() @default(autoincrement())
    text String
    user User @relation(fields: [userId], references: [id])
    userId String
    issue Issue @relation(fields: [issueId], references: [id])
    issueId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    parent Comment? @relation("ChildComments", fields: [parentId], references: [id])
    parentId Int?
    children Comment[] @relation("ChildComments")
}

model CommentLog {
    id Int @id() @default(autoincrement())
    text String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    issueLog IssueLog @relation(fields: [issueLogId], references: [id])
    issueLogId Int
    user User @relation(fields: [userId], references: [id])
    userId String
}