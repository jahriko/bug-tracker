//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Status {
    BACKLOG
    IN_PROGRESS
    DONE
    CANCELLED
}

enum Priority {
    NO_PRIORITY
    HIGH
    MEDIUM
    LOW
}

enum Role {
    ADMIN
    MEMBER
}

/// @@allow('create', true)
/// @@allow('read', workspaceMembers?[workspace.members?[user == auth()]])
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(cuid())
    name String
    email String @unique()
    emailVerified DateTime?
    image String?
    hashedPassword String
    lastWorkspaceUrl String?
    ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
    workspaceMembers WorkspaceMember[]
    projectMembers ProjectMember[]
    assignedIssues Issue[] @relation("AssignedUser")
    issues Issue[]
    logs IssueActivity[]
    comments Comment[]
    authoredDiscussions Discussion[] @relation("DiscussionAuthor")
    discussionPosts DiscussionPost[] @relation("DiscussionPostAuthor")
    discussionLikes DiscussionLike[]
}

/// @@allow('read', !private || members?[user == auth()])
/// @@allow('create,update', members?[user == auth() && role == 'ADMIN'])
/// @@allow('all', owner == auth())
model Workspace {
    id Int @id() @default(autoincrement())
    name String @unique()
    description String?
    createdAt DateTime @default(now())
    private Boolean @default(true)
    url String @unique()
    members WorkspaceMember[]
    projects Project[]
    discussions Discussion[]
    owner User @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String

    @@index([ownerId])
}

/// @@allow('read', !workspace.private || workspace.members?[user == auth()])
/// @@allow('all', workspace.owner == auth() || workspace.members?[user == auth() && role == 'ADMIN'])
model WorkspaceMember {
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role Role @default(MEMBER)

    @@id([workspaceId, userId])
}

/// @@allow('all', check(workspace) || workspace.members?[user == auth() && role == 'ADMIN'])
/// @@allow('read', check(workspace) || members?[user == auth()])
model Project {
    id Int @id() @default(autoincrement())
    identifier String @unique()
    title String
    description String?
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())
    archivedAt DateTime?
    members ProjectMember[]
    issues Issue[]
    discussions Discussion[]
    discussionCategories DiscussionCategory[]
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId Int

    @@index([archivedAt, workspaceId])
}

/// @@deny('all', auth() == null)
/// @@allow('read', true)
/// @@allow('all', project.workspace.owner == auth() || project.workspace.members?[user == auth() && role == 'ADMIN'])
model ProjectMember {
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@id([projectId, userId])
}

/// @@allow('read', true)
/// @@deny('all', auth() == null)
model Label {
    id Int @id() @default(autoincrement())
    name String
    color String
    issues IssueLabel[]
}

/// @@allow('read', check(issue))
/// @@allow('create,update', check(issue))
/// @@allow('delete', true)
model IssueLabel {
    issueId Int
    labelId Int
    issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
    label Label @relation(fields: [labelId], references: [id])

    @@id([issueId, labelId])
}

/// @@allow('read', check(project))
/// @@allow('create', check(project))
/// @@allow('update,delete', check(project) || auth() == owner)
/// @@deny('update', future().owner != owner)
model Issue {
    id Int @id() @default(autoincrement())
    title String
    status Status @default(BACKLOG)
    priority Priority @default(NO_PRIORITY)
    description String
    assignedUser User? @relation(fields: [assignedUserId], references: [id], name: "AssignedUser")
    assignedUserId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    archivedAt DateTime?
    owner User? @relation(fields: [ownerId], references: [id], onDelete: SetNull)
    ownerId String?
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int
    labels IssueLabel[]
    activityLogs IssueActivity[]
    comments Comment[]

    @@index([status])
    @@index([priority])
    @@index([createdAt])
}

/// @@allow('read,create', check(issue))
/// @@allow('delete', auth() == author || issue.project.workspace.members?[user == auth() && role == 'ADMIN'])
model Comment {
    id Int @id() @default(autoincrement())
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deletedAt DateTime?
    author User @relation(fields: [authorId], references: [id])
    authorId String
    issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
    issueId Int
    parent Comment? @relation("ChildComments", fields: [parentId], references: [id])
    parentId Int?
    children Comment[] @relation("ChildComments")

    @@index([authorId])
    @@index([createdAt])
}

/// @@delegate(issueActivity)
/// @@allow('all', check(issue))
model IssueActivity {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
    issueId Int
    user User @relation(fields: [userId], references: [id])
    userId String
    issueActivity String
    delegate_aux_statusActivity StatusActivity?
    delegate_aux_priorityActivity PriorityActivity?
    delegate_aux_titleActivity TitleActivity?
    delegate_aux_descriptionActivity DescriptionActivity?
    delegate_aux_assignedActivity AssignedActivity?
    delegate_aux_labelActivity LabelActivity?
    delegate_aux_commentActivity CommentActivity?
    delegate_aux_projectActivity ProjectActivity?

    @@index([issueId, createdAt])
}

/// @@allow('all', check(issue))
model StatusActivity {
    id Int @id()
    statusName String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
model PriorityActivity {
    id Int @id()
    priorityName String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
model TitleActivity {
    id Int @id()
    title String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
model DescriptionActivity {
    id Int @id()
    body String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
model AssignedActivity {
    id Int @id()
    assignedUsername String
    assignedUserImage String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
model LabelActivity {
    id Int @id()
    labelName String
    labelColor String
    action String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
/// @@deny('all', auth() == null)
/// @@allow('read', true && !issue.project.workspace.private)
/// @@allow('create', issue.project.workspace.members?[user == auth()])
/// @@allow('update', auth() == user || issue.project.workspace.members?[user == auth() && role == 'ADMIN'])
model CommentActivity {
    id Int @id()
    commentId Int
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('all', check(issue))
model ProjectActivity {
    id Int @id()
    projectName String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('read', check(project))
/// @@allow('create,update,delete', project.workspace.members?[user == auth() && role == 'ADMIN'])
model DiscussionCategory {
    id Int @id() @default(autoincrement())
    name String
    description String?
    emoji String?
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int
    discussions Discussion[]

    @@unique([projectId, name])
    @@index([projectId])
}

/// @@allow('read', check(project))
/// @@allow('create', auth() != null && project.members?[user == auth()])
/// @@allow('update', auth() == author || project.workspace.members?[user == auth() && role == 'ADMIN'])
/// @@allow('delete', project.workspace.members?[user == auth() && role == 'ADMIN'])
model Discussion {
    id Int @id() @default(autoincrement())
    title String
    content String @db.Text()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int
    author User @relation("DiscussionAuthor", fields: [authorId], references: [id])
    authorId String
    category DiscussionCategory @relation(fields: [categoryId], references: [id])
    categoryId Int
    posts DiscussionPost[]
    isResolved Boolean @default(false)
    viewCount Int @default(0)
    likeCount Int @default(0)
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId Int
    likes DiscussionLike[]
    pinnedAt DateTime?

    @@index([projectId])
    @@index([createdAt])
    @@index([categoryId])
}

/// @@allow('read', check(discussion))
/// @@allow('create,delete', discussion.workspace.members?[user == auth()])
model DiscussionLike {
    id Int @id() @default(autoincrement())
    discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
    discussionId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([discussionId, userId])
    @@index([discussionId])
    @@index([userId])
}

/// @@allow('read', check(discussion))
/// @@allow('create', auth() != null && discussion.project.members?[user == auth()])
/// @@allow('update', auth() == author)
/// @@allow('delete', auth() == author || discussion.project.workspace.members?[user == auth() && role == 'ADMIN'])
model DiscussionPost {
    id Int @id() @default(autoincrement())
    content String @db.Text()
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
    discussionId Int
    author User @relation("DiscussionPostAuthor", fields: [authorId], references: [id])
    authorId String
    parent DiscussionPost? @relation("Replies", fields: [parentId], references: [id])
    parentId Int?
    replies DiscussionPost[] @relation("Replies")
    isAccepted Boolean @default(false)

    @@index([discussionId])
}