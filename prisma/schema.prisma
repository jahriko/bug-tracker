//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    ADMIN
    PROJECT_MANAGER
    MEMBER
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String?
    access_token String?
    expires_at Int?
    token_type String?
    scope String?
    id_token String?
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create', true)
/// @@allow('read', workspaceMembers?[workspace.members?[user == auth()]])
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(cuid())
    name String
    email String @unique()
    emailVerified DateTime?
    image String?
    hashedPassword String
    lastWorkspace String?
    accounts Account[]
    sessions Session[]
    ownedWorkspaces Workspace[] @relation("WorkspaceOwner")
    workspaceMembers WorkspaceMember[]
    projectMembers ProjectMember[]
    assignedIssues Issue[] @relation("Assignee")
    issues Issue[]
    logs IssueActivity[]
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
}

/// @@allow('read', !private)
/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members?[user == auth()])
/// @@allow('update', members?[user == auth() && role == 'ADMIN'])
/// @@allow('all', owner == auth())
model Workspace {
    id Int @id() @default(autoincrement())
    name String @unique()
    description String?
    createdAt DateTime @default(now())
    private Boolean @default(true)
    members WorkspaceMember[]
    projects Project[]
    owner User @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
}

/// @@deny('all', auth() == null)
/// @@allow('all', workspace.owner == auth() || workspace.members?[user == auth() && role == 'ADMIN'])
/// @@allow('read', workspace.members?[user == auth()])
model WorkspaceMember {
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role Role @default(MEMBER)

    @@id([workspaceId, userId])
}

/// @@deny('all', auth() == null)
/// @@allow('read', workspace.members?[user == auth()] || !workspace.private)
/// @@allow('create,update', workspace.members?[user == auth() && role == 'PROJECT_MANAGER'])
/// @@allow('all', workspace.owner == auth() || workspace.members?[user == auth() && role == 'ADMIN'])
model Project {
    id String @id() @default(cuid())
    title String
    updatedAt DateTime @updatedAt()
    createdAt DateTime @default(now())
    archivedAt DateTime?
    members ProjectMember[]
    issues Issue[]
    workspace Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId Int?

    @@index([archivedAt])
}

/// @@deny('all', auth() == null)
/// @@allow('all', project.workspace.owner == auth() || project.workspace.members?[user == auth() && (role == 'ADMIN' || role == 'PROJECT_MANAGER')])
/// @@allow('read', project.members?[user == auth()] || !project.workspace.private)
model ProjectMember {
    project Project @relation(fields: [projectId], references: [id])
    projectId String
    user User @relation(fields: [userId], references: [id])
    userId String

    @@id([projectId, userId])
}

/// @@allow('read', project.members?[user == auth()] || !project.workspace.private)
/// @@allow('read,create,update', auth() == owner || project.members?[user == auth()] || project.workspace.members?[user == auth() && (role == 'ADMIN' || role == 'PROJECT_MANAGER')])
/// @@deny('update', future().owner != owner)
model Issue {
    id Int @id() @default(autoincrement())
    title String
    status String
    priority String
    description String
    assignee User? @relation(fields: [assigneeId], references: [id], name: "Assignee")
    assigneeId String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    archivedAt DateTime?
    owner User? @relation(fields: [ownerId], references: [id], onDelete: SetNull)
    ownerId String?
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    labels IssueLabel[]
    activityLogs IssueActivity[]

    @@index([archivedAt, ownerId])
}

/// @@allow('read', true)
/// @@deny('all', auth() == null)
model Label {
    id Int @id() @default(autoincrement())
    name String
    color String
    issues IssueLabel[]
}

model IssueLabel {
    issueId Int
    labelId Int
    issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
    label Label @relation(fields: [labelId], references: [id])

    @@id([issueId, labelId])
}

/// @@delegate(issueActivity)
/// @@allow('read', true)
model IssueActivity {
    id Int @id() @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    issue Issue @relation(fields: [issueId], references: [id], onDelete: Cascade)
    issueId Int
    user User @relation(fields: [userId], references: [id])
    userId String
    issueActivity String
    delegate_aux_statusActivity StatusActivity?
    delegate_aux_priorityActivity PriorityActivity?
    delegate_aux_titleActivity TitleActivity?
    delegate_aux_assigneeActivity AssigneeActivity?
    delegate_aux_labelActivity LabelActivity?
    delegate_aux_comment Comment?
}

/// @@allow('read', true)
/// @@allow('all', true)
model StatusActivity {
    id Int @id()
    name String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('read', true)
model PriorityActivity {
    id Int @id()
    name String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('read', true)
model TitleActivity {
    id Int @id()
    title String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('read', true)
model AssigneeActivity {
    id Int @id()
    assignedUser String
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('read', true)
model LabelActivity {
    id Int @id()
    labelId Int
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// @@allow('read', true)
/// @@deny('all', auth() == null)
/// @@allow('read', true && !issue.project.workspace.private)
/// @@allow('create', issue.project.workspace.members?[user == auth()])
/// @@allow('update', auth() == user || issue.project.workspace.members?[user == auth() && role == 'ADMIN'])
model Comment {
    id Int @id()
    text String
    deletedAt DateTime?
    parent Comment? @relation("ChildComments", fields: [parentId], references: [id], onDelete: Cascade)
    parentId Int?
    children Comment[] @relation("ChildComments")
    delegate_aux_issueActivity IssueActivity @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}