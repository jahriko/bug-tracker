datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id() @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String     @id() @default(cuid())
  name           String
  email          String     @unique()
  emailVerified  DateTime?
  image          String?
  hashedPassword String
  lastWorkspace  String?
  accounts       Account[]
  sessions       Session[]
  issues         Issue[]
  projectLead    Project[]  @relation("ProjectLead")
  comments       Comment[]
  assignedIssues Issue[]    @relation("Assignee")
  logs           IssueLog[]
  Workspace      Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId    Int?
  Team           Team?      @relation(fields: [teamId], references: [id])
  teamId         Int?
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id            String     @id() @default(cuid())
  title         String
  updatedAt     DateTime   @updatedAt()
  createdAt     DateTime   @default(now())
  projectLead   User?      @relation(fields: [projectLeadId], references: [id], name: "ProjectLead")
  projectLeadId String?
  issues        Issue[]
  Workspace     Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId   Int?
  Team          Team?      @relation(fields: [teamId], references: [id])
  teamId        Int?
}

model Workspace {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String? // Optional description of the workspace
  createdAt   DateTime  @default(now())
  members     User[] // Relationship to users in the workspace
  projects    Project[] // Relationship to projects within the workspace
}

model Issue {
  id          Int          @id() @default(autoincrement())
  title       String
  status      String
  priority    String
  description String
  label       String[]
  labels      Label[]
  assignee    User?        @relation(fields: [assigneeId], references: [id], name: "Assignee")
  assigneeId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  comments    Comment[]
  issueLabels IssueLabel[]
  logs        IssueLog[]
}

model Comment {
  id        Int      @id() @default(autoincrement())
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  parent   Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  parentId Int?
  children Comment[] @relation("ChildComments")
}

model Label {
  id    Int    @id() @default(autoincrement())
  name  String
  color String

  issueLabels IssueLabel[]
  Issue       Issue?       @relation(fields: [issueId], references: [id])
  issueId     Int?
}

model IssueLabel {
  issueId Int
  labelId Int
  issue   Issue @relation(fields: [issueId], references: [id])
  label   Label @relation(fields: [labelId], references: [id])

  @@id([issueId, labelId])
}

model IssueLog {
  id        Int      @id @default(autoincrement())
  action    String // e.g., "status_updated", "priority_updated", etc.
  oldValue  String? // The old value before the update
  newValue  String? // The new value after the update
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Team {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  members     User[]
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
}
